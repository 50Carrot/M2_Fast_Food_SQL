-- Use DB
	USE fast_food_db;
	GO
	
/*Lección 9 de 10 Entrega de Proyecto Integrador
This sheet contains the question that were in the final document and the extra credit points*/
	
-- Calculate the average time from dispatch to delivery for all messengers
	SELECT AVG(DATEDIFF(MINUTE, o.dispatch_datetime, o.delivery_datetime)) AS 'Average Delivery Time (minutes)'
	FROM orders o
	INNER JOIN messengers m ON o.messenger_id = m.messenger_id;
	GO
/*'Average Delivery Time (minutes)' : 30 */

-- Total sales by sales channel
	SELECT s.description, SUM(o.total_amount) AS 'Total Sales'
	FROM orders o
	INNER JOIN order_origins s ON o.order_origin_id = s.order_origin_id
	GROUP BY s.description
	ORDER BY 'Total Sales' DESC;
	GO
	
/*description: total_sales:
Presencial	8560.00
En línea	4414.04
Drive Thru	4380.00
Teléfono	4340.00*/
select * from order_origins

-- Total income generated by each employee
SELECT e.employee_name, SUM(o.total_amount) AS 'Total Income Generated'
FROM orders o
INNER JOIN employees e ON o.employee_id = e.employee_id
GROUP BY e.employee_name
ORDER BY 'Total Income Generated' DESC;
GO

/*employee_name , total income generated
John Doe	4414.04
Ethan Martinez	4380.00
Olivia García	4340.00
Jane Smith	4300.00
Lucas Miller	4260.00*/

-- Demand analysis by time of day
SELECT sale_time, COUNT(*) AS 'Number of Orders'
FROM orders
GROUP BY sale_time;
GO

/* sale_time, number of orders
Mañana	8
Noche	4
Tarde	8*/

-- Monthly sales trend
-- Comparación de Ventas Mensuales: ¿Cuál es la tendencia de los ingresos generados en cada periodo mensual?
SELECT YEAR(dispatch_datetime) AS 'Year', MONTH(dispatch_datetime) AS 'Month', SUM(total_amount) AS 'Total Sales'
FROM orders
GROUP BY YEAR(dispatch_datetime), MONTH(dispatch_datetime)
ORDER BY YEAR(dispatch_datetime), MONTH(dispatch_datetime);
GO
/*2023	1	4414.04
2023	2	4300.00
2023	7	4260.00
2023	8	4340.00
2023	9	4380.00*/
-- Percentage of recurring versus new customers
WITH CustomerOrders AS (
    SELECT customer_id, COUNT(*) AS order_count
    FROM orders
    GROUP BY customer_id
)
SELECT 
    CASE 
        WHEN order_count > 1 THEN 'Recurring'
        ELSE 'New'
    END AS 'Customer Type',
    COUNT(*) AS 'Number of Customers',
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM CustomerOrders)) AS 'Percentage'
FROM CustomerOrders
GROUP BY 
    CASE 
        WHEN order_count > 1 THEN 'Recurring'
        ELSE 'New'
    END;
GO

/*custom _type, number of costumers, percentage
Recurring	5	100.000000000000*/




--extra 1. Expansión de Datos

-- Insert data into the customers table
	INSERT INTO customers (customer_name, contact_details) VALUES 
	('Carlos López', 'carlos.lopez@example.com'),
	('Ana Martínez', 'ana.martinez@example.com'),
	('Luis Fernández', 'luis.fernandez@example.com'),
	('María Gómez', 'maria.gomez@example.com');
	GO
-- Insert data into the branches table
	INSERT INTO branches (branch_name, location) VALUES 
	('Sucursal Centro', 'Calle Principal 123, Ciudad'),
	('Sucursal Norte', 'Avenida Norte 456, Ciudad'),
	('Sucursal Sur', 'Boulevard Sur 789, Ciudad');
	GO
-- Insert data into the messengers table
	INSERT INTO messengers (messenger_name, is_external) VALUES 
	('Pedro García', 0), -- Internal
	('Sofía Pérez', 1), -- External
	('Javier Romero', 0); -- Internal
	GO
-- Insert data into the order_origins table
	INSERT INTO order_origins (origin_name, description) VALUES 
	('Aplicación Móvil', 'Pedidos realizados a través de la aplicación móvil'),
	('Sitio Web', 'Pedidos realizados en el sitio web oficial'),
	('Teléfono', 'Pedidos realizados por llamada telefónica');
	GO
-- Insert data into the payment_types table
	INSERT INTO payment_types (payment_type_name) VALUES 
	('Efectivo'),
	('Tarjeta de Crédito'),
	('Tarjeta de Débito');
	GO
-- Insert data into the categories table
	INSERT INTO categories (category_name) VALUES 
	('Bebidas'),
	('Comida Rápida'),
	('Postres');
	GO
-- Insert data into the departments table
	INSERT INTO departments (department_name) VALUES 
	('Cocina'),
	('Atención al Cliente'),
	('Logística');
	GO
-- Insert data into the products table
	INSERT INTO products (product_name, category_id) VALUES 
	('Hamburguesa Clásica', 2),
	('Papas Fritas', 2),
	('Coca-Cola', 1),
	('Brownie', 3);
	GO
-- Insert data into the employees table
	INSERT INTO employees (branch_id, department_id, employee_name, department_name, position, role) VALUES 
	(1, 1, 'José Rodríguez', 'Cocina', 'Chef', 'Preparar comida'),
	(2, 2, 'Laura Salinas', 'Atención al Cliente', 'Recepcionista', 'Atender pedidos'),
	(3, 3, 'Miguel Santos', 'Logística', 'Coordinador de Entregas', 'Coordinar entregas');
	GO
-- Insert data into the orders table
	INSERT INTO orders (customer_id, branch_id, messenger_id, order_origin_id, payment_type_id, sale_time, total_amount, kilometers_to_cover, dispatch_datetime, delivery_datetime, order_taken_datetime, order_ready_datetime) VALUES 
	(1, 1, 1, 1, 2, 'Afternoon', 15.00, 5.00, '2024-08-14 14:00:00', '2024-08-14 14:45:00', '2024-08-14 13:55:00', '2024-08-14 14:10:00'),
	(2, 2, 2, 2, 1, 'Evening', 22.00, 10.00, '2024-08-14 18:00:00', '2024-08-14 19:00:00', '2024-08-14 17:55:00', '2024-08-14 18:15:00'),
	(3, 3, 3, 3, 3, 'Morning', 30.00, 8.00, '2024-08-14 10:00:00', '2024-08-14 10:50:00', '2024-08-14 09:55:00', '2024-08-14 10:05:00');
	GO

--tabla: suppliers
	CREATE TABLE suppliers (
		supplier_id INT IDENTITY(1,1) PRIMARY KEY,
		supplier_name VARCHAR(100),
		contact_info VARCHAR(255)
	);
	GO

--tabla: marketing_campaigns
	CREATE TABLE marketing_campaigns (
		campaign_id INT IDENTITY(1,1) PRIMARY KEY,
		campaign_name VARCHAR(100),
		start_date DATE,
		end_date DATE,
		budget DECIMAL(10, 2)
	);
	GO

-- Insert data into the suppliers table
	INSERT INTO suppliers (supplier_name, contact_info) VALUES 
	('Proveedor ABC', 'contacto@proveedorabc.com, +123456789'),
	('Distribuciones XYZ', 'ventas@distribucionesxyz.com, +987654321'),
	('Suministros Gourmet', 'info@suministrosgourmet.com, +1122334455'),
	('Alimentos del Norte', 'contacto@alimentosdelnorte.com, +5566778899'
	);
	GO
	
	select * from suppliers

-- Insert data into the marketing_campaigns table
	INSERT INTO marketing_campaigns (campaign_name, start_date, end_date, budget) VALUES 
	('Promoción de Verano 2024', '2024-06-01', '2024-08-31', 50000.00),
	('Campaña de Navidad 2024', '2024-12-01', '2024-12-25', 30000.00),
	('Descuento de Año Nuevo', '2024-01-01', '2024-01-15', 15000.00),
	('Semana del Cliente', '2024-09-01', '2024-09-07', 20000.00
	);
	GO

	select * from marketing_campaigns 

--2. Nuevas Consultas Estratégicas
--Seasonal Consumption Patterns
	SELECT MONTH(dispatch_datetime) AS 'Month', COUNT(*) AS 'Number of Orders'
	FROM orders
	GROUP BY MONTH(dispatch_datetime)
	ORDER BY MONTH(dispatch_datetime);
	GO

--Regional Product Preferences
	SELECT b.branch_name AS 'Branch Name', p.product_name AS 'Product Name', COUNT(oi.product_id) AS 'Quantity Sold'
	FROM order_items oi
	INNER JOIN products p ON oi.product_id = p.product_id
	INNER JOIN orders o ON oi.order_id = o.order_id
	INNER JOIN branches b ON o.branch_id = b.branch_id
	GROUP BY b.branch_name, p.product_name
	ORDER BY b.branch_name, p.product_name;
	GO

--3. Optimización de Rendimiento (checked)
--4 Implementación de Índices 
	CREATE INDEX idx_dispatch_datetime ON orders(dispatch_datetime);
	CREATE INDEX idx_product_name ON products(product_name);
	GO
	--Identify Key Columns: Columns frequently used in WHERE, JOIN, and ORDER BY.

--queries 
--Uncategorized Products:
	IF NOT EXISTS (
		SELECT 1
		FROM products
		WHERE category_id IS NULL
	)
	BEGIN
		PRINT 'No existen productos sin categoria';
	END
	ELSE
	BEGIN
		SELECT product_name AS 'Product Name'
		FROM products
		WHERE category_id IS NULL;
	END

--Complete Order Detail:
	SELECT o.order_id AS 'Order ID', c.customer_name AS 'Customer Name', 
	e.employee_name AS 'Employee Name', m.messenger_name AS 'Messenger Name'
	FROM orders o
	INNER JOIN customers c ON o.customer_id = c.customer_id
	INNER JOIN employees e ON o.employee_id = e.employee_id
	INNER JOIN messengers m ON o.messenger_id = m.messenger_id;
	GO

--Count Items Sold by Category and Branch
	SELECT b.branch_name AS 'Branch Name', c.category_name AS 'Category Name', 
    COUNT(oi.product_id) AS 'Total Products Sold'
	FROM order_items oi
	INNER JOIN products p ON oi.product_id = p.product_id
	INNER JOIN categories c ON p.category_id = c.category_id
	INNER JOIN orders o ON oi.order_id = o.order_id
	INNER JOIN branches b ON o.branch_id = b.branch_id
	GROUP BY b.branch_name, c.category_name
	ORDER BY b.branch_name, c.category_name;
	GO